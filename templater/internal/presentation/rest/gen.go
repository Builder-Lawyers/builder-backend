// Package rest provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package rest

import (
	"github.com/gofiber/fiber/v2"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Checks domain availability
	// (POST /domain/check)
	CheckDomain(c *fiber.Ctx) error
	// Provision a new site
	// (POST /provision)
	ProvisionSite(c *fiber.Ctx) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// CheckDomain operation middleware
func (siw *ServerInterfaceWrapper) CheckDomain(c *fiber.Ctx) error {

	return siw.Handler.CheckDomain(c)
}

// ProvisionSite operation middleware
func (siw *ServerInterfaceWrapper) ProvisionSite(c *fiber.Ctx) error {

	return siw.Handler.ProvisionSite(c)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(fiber.Handler(m))
	}

	router.Post(options.BaseURL+"/domain/check", wrapper.CheckDomain)

	router.Post(options.BaseURL+"/provision", wrapper.ProvisionSite)

}

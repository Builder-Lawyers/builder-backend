// Package rest provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package rest

import (
	"github.com/gofiber/fiber/v2"
)

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Error string `json:"error"`
}

// ProvisionSiteRequest defines model for ProvisionSiteRequest.
type ProvisionSiteRequest struct {
	DomainVariants []string `json:"domainVariants"`

	// Fields json object with all widgets and fields of a site
	Fields       map[string]interface{} `json:"fields"`
	SiteID       uint64                 `json:"siteID"`
	TemplateName uint64                 `json:"templateName"`
}

// ProvisionSiteResponse defines model for ProvisionSiteResponse.
type ProvisionSiteResponse struct {
	SiteID uint64 `json:"siteID"`
}

// ProvisionSiteJSONRequestBody defines body for ProvisionSite for application/json ContentType.
type ProvisionSiteJSONRequestBody = ProvisionSiteRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Provision a new site
	// (POST /sites/provision)
	ProvisionSite(c *fiber.Ctx) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// ProvisionSite operation middleware
func (siw *ServerInterfaceWrapper) ProvisionSite(c *fiber.Ctx) error {

	return siw.Handler.ProvisionSite(c)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(fiber.Handler(m))
	}

	router.Post(options.BaseURL+"/sites/provision", wrapper.ProvisionSite)

}

// Package rest provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package rest

import (
	"fmt"

	"github.com/gofiber/fiber/v2"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for UpdateSiteRequestNewStatus.
const (
	AwaitingProvision UpdateSiteRequestNewStatus = "AwaitingProvision"
	Created           UpdateSiteRequestNewStatus = "Created"
	InCreation        UpdateSiteRequestNewStatus = "InCreation"
)

// CreateSiteRequest defines model for CreateSiteRequest.
type CreateSiteRequest struct {
	// Fields json object with all widgets and fields of a site
	Fields     *map[string]interface{} `json:"fields,omitempty"`
	TemplateID uint8                   `json:"templateID"`
	UserID     openapi_types.UUID      `json:"userID"`
}

// CreateSiteResponse defines model for CreateSiteResponse.
type CreateSiteResponse struct {
	SiteID uint64 `json:"siteID"`
}

// EnrichContentRequest defines model for EnrichContentRequest.
type EnrichContentRequest struct {
	Content string `json:"content"`
}

// EnrichContentResponse defines model for EnrichContentResponse.
type EnrichContentResponse struct {
	Enriched string `json:"enriched"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Error string `json:"error"`
}

// UpdateSiteRequest defines model for UpdateSiteRequest.
type UpdateSiteRequest struct {
	Fields     *[]string                   `json:"fields,omitempty"`
	NewStatus  *UpdateSiteRequestNewStatus `json:"newStatus,omitempty"`
	TemplateID uint8                       `json:"templateID"`
}

// UpdateSiteRequestNewStatus defines model for UpdateSiteRequest.NewStatus.
type UpdateSiteRequestNewStatus string

// UpdateSiteResponse defines model for UpdateSiteResponse.
type UpdateSiteResponse struct {
	SiteID uint64 `json:"siteID"`
}

// EnrichContentJSONRequestBody defines body for EnrichContent for application/json ContentType.
type EnrichContentJSONRequestBody = EnrichContentRequest

// CreateSiteJSONRequestBody defines body for CreateSite for application/json ContentType.
type CreateSiteJSONRequestBody = CreateSiteRequest

// UpdateSiteJSONRequestBody defines body for UpdateSite for application/json ContentType.
type UpdateSiteJSONRequestBody = UpdateSiteRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Enrich some user provided info using AI
	// (POST /ai/enrich)
	EnrichContent(c *fiber.Ctx) error
	// Create a new site
	// (POST /sites)
	CreateSite(c *fiber.Ctx) error
	// Update an existing site
	// (PUT /sites/{id})
	UpdateSite(c *fiber.Ctx, id uint64) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// EnrichContent operation middleware
func (siw *ServerInterfaceWrapper) EnrichContent(c *fiber.Ctx) error {

	return siw.Handler.EnrichContent(c)
}

// CreateSite operation middleware
func (siw *ServerInterfaceWrapper) CreateSite(c *fiber.Ctx) error {

	return siw.Handler.CreateSite(c)
}

// UpdateSite operation middleware
func (siw *ServerInterfaceWrapper) UpdateSite(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint64

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Params("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	return siw.Handler.UpdateSite(c, id)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(fiber.Handler(m))
	}

	router.Post(options.BaseURL+"/ai/enrich", wrapper.EnrichContent)

	router.Post(options.BaseURL+"/sites", wrapper.CreateSite)

	router.Put(options.BaseURL+"/sites/:id", wrapper.UpdateSite)

}

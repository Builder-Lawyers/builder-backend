// Package rest provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package rest

import (
	"fmt"

	"github.com/gofiber/fiber/v2"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Enrich some user provided info using AI
	// (POST /ai/enrich)
	EnrichContent(c *fiber.Ctx) error
	// Creates a confirmation mail with code for user signup
	// (POST /auth/confirmation)
	CreateConfirmation(c *fiber.Ctx) error
	// Gets a session from access token
	// (POST /auth/session)
	CreateSession(c *fiber.Ctx) error
	// Verifies provided confirmation code
	// (POST /auth/verify)
	VerifyUser(c *fiber.Ctx) error
	// Checks domain availability
	// (GET /domain/{domain})
	CheckDomain(c *fiber.Ctx, domain string) error
	// Gets a client secret to create a payment
	// (POST /payments)
	CreatePayment(c *fiber.Ctx) error
	// Listens for webhook requests from stripe
	// (POST /payments/webhook)
	HandleEvent(c *fiber.Ctx) error
	// Gets a payment checkout session info
	// (GET /payments/{id})
	GetPaymentStatus(c *fiber.Ctx, id string) error
	// Create a new site
	// (POST /sites)
	CreateSite(c *fiber.Ctx) error
	// Delete a provisioned site
	// (DELETE /sites/{id})
	DeleteSite(c *fiber.Ctx, id uint64) error
	// Get info about an existing site
	// (GET /sites/{id})
	GetSite(c *fiber.Ctx, id uint64) error
	// Update an existing site
	// (PATCH /sites/{id})
	UpdateSite(c *fiber.Ctx, id uint64) error
	// Create a new template
	// (POST /template)
	CreateTemplate(c *fiber.Ctx) error
	// Gets template info
	// (GET /template/{id})
	GetTemplate(c *fiber.Ctx, id uint8) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// EnrichContent operation middleware
func (siw *ServerInterfaceWrapper) EnrichContent(c *fiber.Ctx) error {

	return siw.Handler.EnrichContent(c)
}

// CreateConfirmation operation middleware
func (siw *ServerInterfaceWrapper) CreateConfirmation(c *fiber.Ctx) error {

	return siw.Handler.CreateConfirmation(c)
}

// CreateSession operation middleware
func (siw *ServerInterfaceWrapper) CreateSession(c *fiber.Ctx) error {

	return siw.Handler.CreateSession(c)
}

// VerifyUser operation middleware
func (siw *ServerInterfaceWrapper) VerifyUser(c *fiber.Ctx) error {

	return siw.Handler.VerifyUser(c)
}

// CheckDomain operation middleware
func (siw *ServerInterfaceWrapper) CheckDomain(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "domain" -------------
	var domain string

	err = runtime.BindStyledParameterWithOptions("simple", "domain", c.Params("domain"), &domain, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter domain: %w", err).Error())
	}

	return siw.Handler.CheckDomain(c, domain)
}

// CreatePayment operation middleware
func (siw *ServerInterfaceWrapper) CreatePayment(c *fiber.Ctx) error {

	return siw.Handler.CreatePayment(c)
}

// HandleEvent operation middleware
func (siw *ServerInterfaceWrapper) HandleEvent(c *fiber.Ctx) error {

	return siw.Handler.HandleEvent(c)
}

// GetPaymentStatus operation middleware
func (siw *ServerInterfaceWrapper) GetPaymentStatus(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Params("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	return siw.Handler.GetPaymentStatus(c, id)
}

// CreateSite operation middleware
func (siw *ServerInterfaceWrapper) CreateSite(c *fiber.Ctx) error {

	return siw.Handler.CreateSite(c)
}

// DeleteSite operation middleware
func (siw *ServerInterfaceWrapper) DeleteSite(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint64

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Params("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	return siw.Handler.DeleteSite(c, id)
}

// GetSite operation middleware
func (siw *ServerInterfaceWrapper) GetSite(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint64

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Params("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	return siw.Handler.GetSite(c, id)
}

// UpdateSite operation middleware
func (siw *ServerInterfaceWrapper) UpdateSite(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint64

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Params("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	return siw.Handler.UpdateSite(c, id)
}

// CreateTemplate operation middleware
func (siw *ServerInterfaceWrapper) CreateTemplate(c *fiber.Ctx) error {

	return siw.Handler.CreateTemplate(c)
}

// GetTemplate operation middleware
func (siw *ServerInterfaceWrapper) GetTemplate(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint8

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Params("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	return siw.Handler.GetTemplate(c, id)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(fiber.Handler(m))
	}

	router.Post(options.BaseURL+"/ai/enrich", wrapper.EnrichContent)

	router.Post(options.BaseURL+"/auth/confirmation", wrapper.CreateConfirmation)

	router.Post(options.BaseURL+"/auth/session", wrapper.CreateSession)

	router.Post(options.BaseURL+"/auth/verify", wrapper.VerifyUser)

	router.Get(options.BaseURL+"/domain/:domain", wrapper.CheckDomain)

	router.Post(options.BaseURL+"/payments", wrapper.CreatePayment)

	router.Post(options.BaseURL+"/payments/webhook", wrapper.HandleEvent)

	router.Get(options.BaseURL+"/payments/:id", wrapper.GetPaymentStatus)

	router.Post(options.BaseURL+"/sites", wrapper.CreateSite)

	router.Delete(options.BaseURL+"/sites/:id", wrapper.DeleteSite)

	router.Get(options.BaseURL+"/sites/:id", wrapper.GetSite)

	router.Patch(options.BaseURL+"/sites/:id", wrapper.UpdateSite)

	router.Post(options.BaseURL+"/template", wrapper.CreateTemplate)

	router.Get(options.BaseURL+"/template/:id", wrapper.GetTemplate)

}
